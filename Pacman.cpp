#include <bits/stdc++.h>
using namespace std;
const int row = 20;
const int column = 65;
const char monster = '%';
char lastValue;
char lastValue2;
char lastValue3;
int i = 18;
int j = 1;
int i2 = 1;
int j2 = column-2;
int i3 = 8;
int j3 = 1;
int i4 = row - 2;
int j4 = column - 2;
bool plusme = false;
bool plusme2 = true;
bool plusme3 = false;
char grid[row][column] = {
{'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'},
{'*','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','%','*'},
{'*','.','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'},
{'*','%','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','*'},
{'*','.','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'},
{'*','.','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'},
{'*','X','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','%','*'},
{'*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'}};

void set_ghost()
{
    grid[i2][j2] = lastValue;
    grid[i3][j3] = lastValue2;
    grid[i4][j4] = lastValue3;
    if(i2 == 1 && j2 == column - 2)
        plusme = false;
    else if(i2 == 1 && j2 == 1)
        plusme = true;
    if(i3 == 8 && j3 == 1)
        plusme2 = true;
    else if(i3 == 8 && j3 == column - 2)
        plusme2 = false;
    if(i3 == row - 2 && j3 == column - 2)
        plusme2 = false;
    else if(i3 == row - 2 && j3 == 1)
        plusme2 = true;
    if(!plusme)
    {
        lastValue = grid[i2][j2 - 1];
        j2 -= 1;
        grid[i2][j2] = monster;
    }
    else if(plusme)
    {
        lastValue = grid[i2][j2 + 1];
        j2 += 1;
        grid[i2][j2] = monster;
    }
    if(!plusme2)
    {
        lastValue2 = grid[i3][j3 - 1];
        j3 -= 1;
        grid[i3][j3] = monster;
    }
    else if(plusme2)
    {
        lastValue2 = grid[i3][j3 + 1];
        j3 += 1;
        grid[i3][j3] = monster;
    }
    if(!plusme3)
    {
        lastValue3 = grid[i4][j4 - 1];
        j4 -= 1;
        grid[i4][j4] = monster;
    }
    if(plusme3)
    {
        lastValue3 = grid[i4][j4 + 1];
        j4 += 1;
        grid[i4][j4] = monster;
    }
}
void print_grid()
{
    for(int i = 0; i < row; i++)
    {
        for(int j = 0; j < column; j++)
        {
            cout << grid[i][j];
        }
        cout<<endl;
    }
}
bool check_fail(int input)
{
    if(input == 8)
    {
        if(grid[i-1][j] == '%')
            return true;
    }
    else if(input == 4)
    {
        if(grid[i][j-1] == '%')
            return true;
    }
    else if(input == 6)
    {
        if(grid[i][j+1] == '%' )
            return true;
    }
    else if(input == 5)
    {
        if(grid[i+1][j] == '%')
            return true;
    }
    return false;
}
bool check_win()
{
    for(int i = 0; i < row; i++)
    {
        for(int j = 0; j < column; j++)
        {
            if(grid[i][j] == '.')
                return false;
        }
    }
    return true;
}
bool valid_move(int input)
{
    if(input == 8)
    {
        if(grid[i-1][j] == '.' || grid[i-1][j] == ' ')
            return true;
    }
    else if(input == 4)
    {
        if(grid[i][j-1] == '.'|| grid[i][j-1] == ' ')
            return true;
    }
    else if(input == 6)
    {
        if(grid[i][j+1] == '.' || grid[i][j+1] == ' ' )
            return true;
    }
    else if(input == 5)
    {
        if(grid[i+1][j] == '.'|| grid[i+1][j] == ' ')
            return true;
    }
    return false;
}
void set_position(int input)
{
     grid[i][j] = ' ';
     if(input == 8)
     {
        grid[i-1][j] = 'X';
        i = i-1;
     }
     else if(input == 4)
     {
        grid[i][j-1] = 'X';
        j = j - 1;
     }
    else if(input == 6)
    {
        grid[i][j+1] = 'X';
        j = j + 1;
    }
    else if(input == 5)
    {
        grid[i+1][j] = 'X';
        i = i + 1;
    }
}
bool check_input(int input)
{
    if(input == 8 || input == 4 || input == 5 || input == 6)
        return true;
    return false;
}
void read_input(int& input)
{
    cout << "----------------" << endl;
    cout << "Enter the position: ";
    cin >> input;
    while(!valid_move(input) || !check_input(input))
    {
        cout << "Enter valid position: ";
        cin >> input;
    }
}
void play()
{
    int input = 0;
    while(true)
    {
        print_grid();
        read_input(input);
        set_position(input);
        if(check_win())
        {
            print_grid();
            cout << "Winner!!" << endl;
            break;
        }
        else if(check_fail(input))
        {
            print_grid();
            cout << "Failed :( !!" << endl;
            break;
        }
        random_move();
    }
}
int main()
{
      cout<<"Welcome to the Pacman Game....."<<endl;
      play();
}
