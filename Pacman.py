row = 20
column = 65
monster = '%'
lastValue = ''
lastValue2 = ''
lastValue3 = ''
i = 18
j = 1
i2 = 1
j2 = column-2
i3 = 8
j3 = 1
i4 = row - 2
j4 = column - 2
plusme = False
plusme2 = True
plusme3 = False
grid= [
['*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*'],
['*','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','%','*'],
['*','.','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'],
['*','%','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','*'],
['*','.','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*',' ','.',' ','*',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','*','.','*'],
['*','.','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',' ','.',' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','.','*'],
['*','X','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','%','*'],
['*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*']];

def set_ghost():
    global i2,j2,i3,j3,i4,j4,lastValue,lastValue2,lastValue3,plusme, plusme2, plusme3
    grid[i2][j2] = lastValue
    grid[i3][j3] = lastValue2
    grid[i4][j4] = lastValue3
    if(i2 == 1 and j2 == column - 2):
        plusme = False
    elif(i2 == 1 and j2 == 1):
        plusme = True
    if(i3 == 8 and j3 == 1):
        plusme2 = True
    elif(i3 == 8 and j3 == column - 2):
        plusme2 = False
    if(i3 == row - 2 and j3 == column - 2):
        plusme2 = False
    elif(i3 == row - 2 and j3 == 1):
        plusme2 = True
    if(not plusme):
        lastValue = grid[i2][j2 - 1]
        j2 -= 1
        grid[i2][j2] = monster
    elif(plusme):
        lastValue = grid[i2][j2 + 1]
        j2 += 1
        grid[i2][j2] = monster
    if(not plusme2):
        lastValue2 = grid[i3][j3 - 1]
        j3 -= 1
        grid[i3][j3] = monster
    elif(plusme2):
        lastValue2 = grid[i3][j3 + 1]
        j3 += 1
        grid[i3][j3] = monster
    if( not plusme3):
        lastValue3 = grid[i4][j4 - 1]
        j4 -= 1
        grid[i4][j4] = monster
    if(plusme3):
        lastValue3 = grid[i4][j4 + 1]
        j4 += 1
        grid[i4][j4] = monster

def print_grid():
    for i in range(row):
        for j in range(column):
            print(grid[i][j], end = ' ')
        print()

def check_fail(c):
    global i
    global j
    if(c == 8):
        if(grid[i-1][j] == '%'):
            return True
    elif(c == 4):
        if grid[i][j-1] == '%':
            return True
    elif(c == 6):
        if(grid[i][j+1] == '%' ):
            return True
    elif(c == 5):
        if(grid[i+1][j] == '%'):
            return True
    return False
def check_win():
    for i  in range(row):
        for j in range(column):
            if(grid[i][j] == '.'):
                return False
    return True
def valid_move(c):
    if c == 8:
        if grid[i-1][j] == '.' or grid[i-1][j] == ' ':
            return True
    elif c == 4:
        if grid[i][j-1] == '.' or grid[i][j-1] == ' ':
            return True
    elif c == 6:
        if grid[i][j+1] == '.' or grid[i][j+1] == ' ':
            return True

    elif c == 5:
        if grid[i+1][j] == '.' or grid[i+1][j] == ' ' :
            return True
    return False

def set_position(c):
     global i,j
     grid[i][j] = ' '
     if c == 8:
        grid[i-1][j] = 'X'
        i -= 1
     elif c == 4:
        grid[i][j-1] = 'X'
        j -= 1
     elif c == 6:
        grid[i][j+1] = 'X'
        j += 1
     elif c == 5:
        grid[i+1][j] = 'X'
        i += 1

def check_input(c):
    if c == 8 or c == 4 or c == 5 or c == 6 :
        return True
    return False

def read_input(c):
    print("----------------")
    print("Enter the position: ")
    c = int(input())
    while not valid_move(c) or not check_input(c):
        print("Enter valid position: ")
        c = int(input())
    return c
def play():
    c = 0
    while True :
        print_grid()
        c = read_input(c)
        set_position(c)
        if check_win() :
            print_grid()
            print("Winner!!")
            break
        elif check_fail(c):
            print_grid()
            print("Failed :( !!")
            break
        set_ghost()
print("Welcome to the Pacman Game.....")
play()
